1. Најпрво отидов на линкот https://desktop.github.com и инсталирав GitHub. Потоа отидов на линкот https://github.com и креирав профил со username vukadinovskam.

2. На линкот https://github.com/settings/repositories го сменив името на главната гранка од main во master и стиснав на копчето update.

3. Креирав remote репозиторум на GitHub со име SI_2024_lab1_203193. Со селектирање на опцијата private истиот го направив приватен.

4. Направив директориум со име SI_2024_lab1_203193 (mkdir SI_2024_lab1_203193), потоа влегов во него (cd SI_2024_lab1_203193) и ја употребив командата: git init за иницијализација на нов local репозиториум во моменталниот директориум SI_2024_lab1_203193.
Може да се забележи дека директориумот е local репозиториум бидејќи во него има скриен фолдер со име .git.

5. За да го поврзам мојот local репозиториум со remote репозиториумот претходно генерирав SSH key и потоа ја искористив командата:
   git remote add origin git@github.com:vukadinovskam/SI_2024_lab1_203193.git. за додавање нов remote репозиториум на мојот local Git репозиториум кој се вика origin по конвенција.
   
6. Ја употребив командата echo "# Marija Vukadinovska 203193" >> README.md за креирање и додавање на првиот фајл README.md во мојот local репозиториум и додавање на текстот наведен во наводници. Фајлот е untracked.
   За поставување на фајлот на stage ја употребив командата: git add . за додавање на сите промени во директориумот. Фајлот е staged. 
   Накрај правам commit со порака така што ја користам командата git commit -m "Initial commit". Фајлот е unmodified.

7. Им направив download на фајловите и ги додадов во local репозиториумот. Сите фајлови се untracked.
   Потоа ги поставив на stage така што ја употребив командата git add . за селектирање на сите фајлови и додавање на сите промени во директориумот. Сите фајлови се staged.
   Накрај правам commit со порака така што ја користам командата git commit -m "Add starter code". Сите фајлови се unmodified.

8. За прво синхронизирање на local репозиториумот со remote репозиториумот ја употребив командата git push -u origin master. Со тоа сите промени на локалната гранка master ќе се постават на remote репозиториумот.

9. Се наоѓам на гранката master од кадешто треба да ги креирам новите гранки bug1 и bug2. Ги креирам гранките со користење на командите: git branch bug1 и git branch bug2. После ова сеуште се наоѓам на гранката master. За да проверам на која гранка се наоѓам ја користам командата: git branch која ќе ги излиста сите постоечки гранки

10. Со командата: git checkout bug1 се префрлам на гранката bug1. 

11. Во документот SILab1_1 направив промена на условот во методот (од == во !=) за да се филтрираат непарните стрингови и ја зачував промената. Сега фајлот стана modified. Бидејки овој фајл веќе е познат, наместо пишување на две команди ќе ја искористам скратената команда: git commit -a -m "Fix wrong condition in filterOddLenghtStrings" за додавање на фајлот на stage и правење commit со порака која ја објаснува направената промена.

12. Со командата: git checkout bug1 се префрлам на гранката bug1.

13. Во документот SILab1_2 исто така направив промена на условот (од < во =>) за да се конкатенираат стринговите помали или еднакви на minLength и ја зачував промената. Исто објаснување од барање 11. горе само со друга порака: git commit -a -m "Fix wrong condition in makeBigStringFrom".
 
14. git checkout bug1

15. Во документот SILab1Main направив промена така што после for циклусот додадов линија за повик на статичката функција filterOddLengthStrings и истата ја зачував. Исто објаснување од горе само со друга порака: git commit -a -m "Call method filterOddLengthStrings in main class".

16. git checkout bug2

17. Во документот SILab1Main направив промена така што после for циклусот додадов линија за повик на статичката функција makeBigStringFrom и истата ја зачував. Исто објаснување од горе само со друга порака: git commit -a -m "Call method makeBigStringFrom in main class".

18. Бидејќи имам направено прво синхронизирање во барање 8. сега за синхронизација на сите гранки со remote репозиториумот ја искористив командата: git push --all за поставување на промените од сите гранки од local репозиториумот на remote репозиториумот.

19. git checkout master

20. Откако се префрлив на гранката master, за спојување на гранката bug1 кон гранката master ја искористив командата: git merge bug1. Тука не настана конфликт и ја искористив стратегијата fast forwrd за спојување на гранките бидејќи bug1 беше 2 комити понапред, а на master немаше нови комити.

21. Сега може да ја искористиме командата git push за поставување на промените од локалната гранка во која се наоѓаме(local master branch) на remote репозиториумот.

22. git checkout bug2 

23. Со користење на командата: git rebase master, се префрлаат комитите од гранката master на гранката bug2 така што најпрво комититите од гранката bug2 се тргаат и се ставаат во temp area, потоа комитите од гранката master се додаваат први на гранката bug2, и потоа после нив се додаваат комитите кои беа зачувани во temp area (значи први одат комитите на master, после нив одат комитите на bug2). Со стратегијата спојување со rebase се избегнува креирањето на дополнителен merge commit. Со rebase на гранките се случува конфликт во линија 16 во фајлот SILab1Main. Рачно го менувам документот (го оставам повикот на filterOddLengthStrings, а другиот го бришам) и го разрешувам конфликтот. Потоа ја користам командата: git add --all за да ја додадам промената и накрај ја користам командата git rebase --continue за да продолжам со спојувањето кон bug2.

24. git checkout master

25. Со користење на командата: git merge bug2, ја спојувам гранката bug2 кон master. Ова спојување се прави со fast forward без да настане конфликт поради претходно користење на rebase во барање 23.
 
26/27. Морав да ја искористам командата: git push origin --force bug2 бидејќи се јави проблем помеѓу два комити поради rebase-от во барање 23.

28. Го додадов фајлот 203193.txt, а во следниот Final commit ќе го додадам logs.txt за да се гледа Final commit. Со git add 203193.txt и со командата git commit -m "Final commit" го додаваме комитот.

29. git push --all командата за синхронизација со remote репозиториумот.




